{"version":3,"sources":["components/header/header.jsx","components/input/input.jsx","components/card/card.jsx","components/card-list/card-list.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","city","Input","type","placeholder","onChange","handleUserInput","onClick","handleSearch","Card","Date","data","date","toLocaleDateString","weekday","src","day","condition","icon","alt","Math","floor","avgtemp_c","text","CardList","weatherData","map","forecast","App","event","setState","userInput","target","value","state","fetchWeather","lastSuccessfullSearch","fetch","this","then","response","json","forecastday","location","name","console","log","catch","err","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+VAYeA,G,MARA,SAACC,GAAD,OACb,yBAAKC,UAAU,UACb,wBAAIA,UAAU,SAAd,SACQ,4BAAQA,UAAU,QAAQD,EAAME,MADxC,wBCYWC,G,MAdD,SAACH,GAAD,OACZ,6BACE,2BACEC,UAAU,eACVG,KAAK,OACLC,YAAY,aACZC,SAAUN,EAAMO,kBAElB,4BAAQN,UAAU,gBAAgBO,QAASR,EAAMS,cAAjD,aCKWC,G,MAbF,SAACV,GAAD,OACX,yBAAKC,UAAU,QACb,uBAAGA,UAAU,QACV,IAAIU,KAAKX,EAAMY,KAAKC,MAAMC,mBAAmB,QAAS,CACrDC,QAAS,UAGb,yBAAKC,IAAKhB,EAAMY,KAAKK,IAAIC,UAAUC,KAAMC,IAAI,KAC7C,uBAAGnB,UAAU,QAAQoB,KAAKC,MAAMtB,EAAMY,KAAKK,IAAIM,WAA/C,UACA,uBAAGtB,UAAU,QAAQD,EAAMY,KAAKK,IAAIC,UAAUM,SCCnCC,G,MARE,SAACzB,GAAD,OACf,yBAAKC,UAAU,aACZD,EAAM0B,YAAYC,KAAI,SAACC,GAAD,OACrB,kBAAC,EAAD,CAAMhB,KAAMgB,UC6DHC,G,wDA7Db,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IA8BRO,gBAAkB,SAACuB,GACjB,EAAKC,SAAS,CAAEC,UAAWF,EAAMG,OAAOC,SAhCvB,EAmCnBzB,aAAe,WACb,IAAMP,EAAO,EAAKiC,MAAMH,UACxB,EAAKD,SACH,CACE7B,SAEF,WACE,EAAKkC,mBAvCT,EAAKD,MAAQ,CACXT,YAAa,GACbxB,KAAM,WACN8B,UAAW,GACXK,sBAAuB,YAGzB,EAAKD,eAVY,E,2DAYH,IAAD,OACbE,MAAM,mFAAD,OACgFC,KAAKJ,MAAMjC,KAD3F,YAGFsC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACd,GACL,EAAKK,SACH,CACEL,YAAaA,EAAYE,SAASe,YAClCN,sBAAuBX,EAAYkB,SAASC,OAE9C,WACEC,QAAQC,IAAI,EAAKZ,MAAMT,mBAI5BsB,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,Q,+BAoB9B,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAMqC,KAAKJ,MAAME,wBACzB,kBAAC,EAAD,CACE5B,aAAc8B,KAAK9B,aACnBF,gBAAiBgC,KAAKhC,kBAExB,kBAAC,EAAD,CAAUmB,YAAaa,KAAKJ,MAAMT,mB,GAxDxBwB,IAAMC,YCIJC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.d19d9a9d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./header.styles.css\";\r\n\r\nconst Header = (props) => (\r\n  <div className=\"header\">\r\n    <h1 className=\"title\">\r\n      3 Day <strong className=\"city\">{props.city}</strong> Weather Forecast\r\n    </h1>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nimport \"./input.styles.css\";\r\n\r\nconst Input = (props) => (\r\n  <div>\r\n    <input\r\n      className=\"search-input\"\r\n      type=\"text\"\r\n      placeholder=\"Enter City\"\r\n      onChange={props.handleUserInput}\r\n    />\r\n    <button className=\"search-button\" onClick={props.handleSearch}>\r\n      Search\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nconst Card = (props) => (\r\n  <div className=\"card\">\r\n    <p className=\"date\">\r\n      {new Date(props.data.date).toLocaleDateString(\"en-US\", {\r\n        weekday: \"long\",\r\n      })}\r\n    </p>\r\n    <img src={props.data.day.condition.icon} alt=\"\" />\r\n    <p className=\"temp\">{Math.floor(props.data.day.avgtemp_c)} Â°C</p>\r\n    <p className=\"text\">{props.data.day.condition.text}</p>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport Card from \"../card/card\";\r\n\r\nimport \"./card-list.styles.css\";\r\n\r\nconst CardList = (props) => (\r\n  <div className=\"card-list\">\r\n    {props.weatherData.map((forecast) => (\r\n      <Card data={forecast} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from \"react\";\n\nimport Header from \"../components/header/header\";\nimport Input from \"../components/input/input\";\nimport CardList from \"../components/card-list/card-list\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      weatherData: [],\n      city: \"Kazanlak\",\n      userInput: \"\",\n      lastSuccessfullSearch: \"Kazanlak\",\n    };\n\n    this.fetchWeather();\n  }\n  fetchWeather() {\n    fetch(\n      `http://api.weatherapi.com/v1/forecast.json?key=ecdee30c3b1e4c1cb0d83252201508&q=${this.state.city}&days=3`\n    )\n      .then((response) => response.json())\n      .then((weatherData) => {\n        this.setState(\n          {\n            weatherData: weatherData.forecast.forecastday,\n            lastSuccessfullSearch: weatherData.location.name,\n          },\n          () => {\n            console.log(this.state.weatherData);\n          }\n        );\n      })\n      .catch((err) => console.log(err));\n  }\n\n  handleUserInput = (event) => {\n    this.setState({ userInput: event.target.value });\n  };\n\n  handleSearch = () => {\n    const city = this.state.userInput;\n    this.setState(\n      {\n        city,\n      },\n      () => {\n        this.fetchWeather();\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header city={this.state.lastSuccessfullSearch} />\n        <Input\n          handleSearch={this.handleSearch}\n          handleUserInput={this.handleUserInput}\n        />\n        <CardList weatherData={this.state.weatherData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}